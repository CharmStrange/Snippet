# -*- coding: utf-8 -*-
"""GrowTopia_STAT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-zQ_YBIe-bjGMX2L8dofjYmq1k3eH2Sd
"""

import pandas as pd

# Train Data
DailyData=[
    [2200, 2200, 7, 4],
    [3515, 2400, 8, 3],
    [2400, 2400, 5, 4],
    [4991, 4800, 14, 5],
    [1231, 200, 1, 1],
    [911, 0, 0, 0],
    [0, 800, 0, 1],
    [0, 0, 0, 0],
    [0, 0, 0, 0],
    [1800, 800, 6, 2]
]

Index = ['Day 1', 'Day 2', 'Day 3', 'Day 4', 'Day 5', 'Day 6', 'Day 7', 'Day 8', 'Day 9', 'Day 10']

Columns = ['Number of Restock', 'Number of sold items', 'Number of ADS', 'Number of Visitors']

Data = pd.DataFrame(DailyData, columns=Columns, index=Index)

Data.to_csv('DailyData.csv')


# Test Data
DailyData_t=[
    [3400, 3000, 12, 6],
    [400, 0, 0, 0],
    [400, 400,0, 1],
    [0, 0, 0, 1],
    [4600, 3200, 9, 3],
    [4000, 1200, 3, 2],
    [0, 0, 0, 1],
    [3991, 3000, 4, 3],
    [5250, 3800, 13, 4],
    [6535, 7500, 21, 7]
]

Data_t = pd.DataFrame(DailyData_t, columns=Columns, index=Index)

Data_t.to_csv('DailyData_t.csv')

# Checking Data

import statistics

# Data['Number of Restock']
print(statistics.mean(Data['Number of Restock']))

# Data['Number of sold items']
print(statistics.mean(Data['Number of sold items']))

# Data['Number of ADS']
print(statistics.mean(Data['Number of ADS']))

# Data['Number of Visitors']
print(statistics.mean(Data['Number of Visitors']))

print(statistics.mean(Data_t['Number of Restock']))
print(statistics.mean(Data_t['Number of sold items']))
print(statistics.mean(Data_t['Number of ADS']))
print(statistics.mean(Data_t['Number of Visitors']))

import matplotlib.pyplot as plt

# Linearity Checking

Data.plot(x='Number of ADS', y='Number of Visitors', style='o')
plt.title("Number of Visitors vs Number of ADS")
plt.xlabel('Number of ADS')
plt.ylabel('Number of Visitors')
plt.show()

Data.plot(x='Number of Restock', y='Number of sold items', style='o')
plt.title("Number of sold items vs Number of Restock")
plt.xlabel('Number of Restock')
plt.ylabel('Number of sold items')
plt.show()

"""If the number of ADS is 0 and the number of visitors is greater than 1, it indicates a returning visitor."""

from sklearn.linear_model import LinearRegression

LR = LinearRegression()

LR.fit(Data['Number of ADS'].values.reshape(-1, 1), Data['Number of Visitors'].values.reshape(-1, 1))
LR.fit(Data['Number of Restock'].values.reshape(-1, 1), Data['Number of sold items'].values.reshape(-1, 1))

predicted_visitors = LR.predict( [ [13], [14] ] )
predicted_sold_items = LR.predict( [ [4800], [3200], [600] ] )

print('predicted visitors : ', predicted_visitors)
print('predicted sold items : ', predicted_sold_items)

plt.scatter(Data['Number of ADS'], Data['Number of Visitors'], color='blue', label='Actual')
plt.plot(Data['Number of ADS'], LR.predict(Data['Number of ADS'].values.reshape(-1, 1)), color='red', label='Predicted')
plt.xlabel('Number of ADS')
plt.ylabel('Number of Visitors')
plt.title('Number of ADS vs Number of Visitors')
plt.legend()
plt.show()

plt.scatter(Data['Number of Restock'], Data['Number of sold items'], color='blue', label='Actual')
plt.plot(Data['Number of Restock'], LR.predict(Data['Number of Restock'].values.reshape(-1, 1)), color='red', label='Predicted')
plt.xlabel('Number of Restock')
plt.ylabel('Number of sold items')
plt.title('Number of Restock vs Number of sold items')
plt.legend()
plt.show()

# Calculate MSE
mse_visitors = mean_squared_error(Data['Number of Visitors'].values.reshape(-1, 1), predicted_visitors)
mse_sold_items = mean_squared_error(Data['Number of sold items'].values.reshape(-1, 1), predicted_sold_items)

print('MSE of visitors: ', mse_visitors)
print('MSE of sold items: ', mse_sold_items)
